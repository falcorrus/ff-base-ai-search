class GradientContainer extends StatefulWidget {
  const GradientContainer({
    super.key,
    required this.width, // Still required by FlutterFlow, but dynamically adjusted
    required this.height,
    required this.gradientBackground,
    this.gradientBorder,
    required this.text,
  });

  final double width;
  final double height;
  final List<Color> gradientBackground;
  final List<Color>? gradientBorder;
  final String text;

  @override
  State<GradientContainer> createState() => _GradientContainerState();
}

class _GradientContainerState extends State<GradientContainer> {
  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        // Ensures the widget doesn't use the given width parameter directly.
        return CustomPaint(
          painter: GradientBorderPainter(
            gradientBorder: widget.gradientBorder,
            borderRadius: 24,
            borderWidth: 1,
          ),
          child: Container(
            constraints: BoxConstraints(
              minWidth: constraints.maxWidth < widget.width
                  ? constraints.maxWidth
                  : widget.width, // Adjusts dynamically
            ),
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: widget.gradientBackground,
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
              ),
              borderRadius: BorderRadius.circular(24),
            ),
            child: Text(
              widget.text,
              style: const TextStyle(
                fontFamily: 'Moderustic',
                fontWeight: FontWeight.w400,
                fontSize: 16,
                height: 1.25, // Line height 20px / Font size 16px
                color: Color(0xFFFFFFFF),
              ),
              textAlign: TextAlign.center,
            ),
          ),
        );
      },
    );
  }
}

class GradientBorderPainter extends CustomPainter {
  GradientBorderPainter({
    required this.gradientBorder,
    required this.borderRadius,
    required this.borderWidth,
  });

  final List<Color>? gradientBorder;
  final double borderRadius;
  final double borderWidth;

  @override
  void paint(Canvas canvas, Size size) {
    if (gradientBorder != null) {
      final Paint borderPaint = Paint()
        ..shader = LinearGradient(
          colors: gradientBorder!,
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
        ).createShader(Rect.fromLTWH(0, 0, size.width, size.height))
        ..style = PaintingStyle.stroke
        ..strokeWidth = borderWidth;

      final RRect borderRect = RRect.fromRectAndRadius(
        Rect.fromLTWH(0, 0, size.width, size.height),
        Radius.circular(borderRadius),
      );

      canvas.drawRRect(borderRect, borderPaint);
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return false;
  }
}