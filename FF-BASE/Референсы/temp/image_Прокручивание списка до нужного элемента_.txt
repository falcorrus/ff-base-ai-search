
// DO NOT REMOVE OR MODIFY THE CODE ABOVE!

import '/custom_code/widgets/index.dart';
import '/flutter_flow/custom_functions.dart';
import 'package:youtube_player_iframe/youtube_player_iframe.dart';

class ScrollToWidget extends StatefulWidget {
  const ScrollToWidget({
    super.key,
    this.width,
    this.height,
    this.selected,
    this.listSupaRows,
  });

  final double? width;
  final double? height;
  final int? selected;
  final List<TipsRow>? listSupaRows;

  @override
  State<ScrollToWidget> createState() => _ScrollToWidgetState();
}

class _ScrollToWidgetState extends State<ScrollToWidget> {
  final ScrollController _scrollController = ScrollController();
  int? _previousSelected;

  // Карта для отслеживания состояния плеера каждого видео
  Map<int, bool> _showPlayerMap = {};
  Map<int, YoutubePlayerController> _controllersMap = {};

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _scrollToSelected();
    });
  }

  @override
  void didUpdateWidget(ScrollToWidget oldWidget) {
    super.didUpdateWidget(oldWidget);

    if (widget.selected != _previousSelected) {
      _previousSelected = widget.selected;
      WidgetsBinding.instance.addPostFrameCallback((_) {
        _scrollToSelected();
      });
    }
  }

  void _scrollToSelected() {
    if (widget.selected == null ||
        widget.listSupaRows == null ||
        widget.listSupaRows!.isEmpty) {
      return;
    }

    final int targetIndex = widget.listSupaRows!.indexWhere(
      (tip) => tip.id == widget.selected!,
    );

    if (targetIndex != -1 && _scrollController.hasClients) {
      const double itemHeight = 290.0;
      final double targetOffset = targetIndex * itemHeight;

      _scrollController.animateTo(
        targetOffset,
        duration: const Duration(milliseconds: 500),
        curve: Curves.easeInOut,
      );
    }
  }

  @override
  void dispose() {
    _scrollController.dispose();
    // Освобождаем все YouTube контроллеры
    for (var controller in _controllersMap.values) {
      controller.close();
    }
    super.dispose();
  }

  String _getYoutubeThumbnail(String? videoUrl) {
    if (videoUrl == null || videoUrl.isEmpty) return '';
    final videoId = YoutubePlayerController.convertUrlToId(videoUrl);
    if (videoId != null) {
      return 'https://img.youtube.com/vi/$videoId/hqdefault.jpg';
    }
    return '';
  }

  String? _getYoutubeVideoId(String? videoUrl) {
    if (videoUrl == null || videoUrl.isEmpty) return null;
    return YoutubePlayerController.convertUrlToId(videoUrl);
  }

  void _togglePlayer(int tipId, String? videoUrl) {
    final videoId = _getYoutubeVideoId(videoUrl);
    if (videoId == null) return;

    setState(() {
      _showPlayerMap[tipId] = !(_showPlayerMap[tipId] ?? false);

      if (_showPlayerMap[tipId]! && !_controllersMap.containsKey(tipId)) {
        _controllersMap[tipId] = YoutubePlayerController.fromVideoId(
          videoId: videoId,
          autoPlay: true,
          params: const YoutubePlayerParams(
            showControls: true,
            showFullscreenButton: true,
          ),
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    if (widget.listSupaRows == null || widget.listSupaRows!.isEmpty) {
      return Container(
        width: widget.width,
        height: widget.height,
        alignment: Alignment.center,
        child: Text(
          'No tips available',
          style: FlutterFlowTheme.of(context).bodyMedium,
        ),
      );
    }

    return Container(
      width: widget.width,
      height: widget.height,
      // Убраны все padding'и, margin'ы, decoration и тени
      child: ListView.builder(
        controller: _scrollController,
        itemCount: widget.listSupaRows!.length,
        padding: EdgeInsets.zero, // Убраны отступы у списка
        itemBuilder: (context, index) {
          final tip = widget.listSupaRows![index];
          final isSelected = tip.id == widget.selected;
          final showPlayer = _showPlayerMap[tip.id] ?? false;

          return Container(
            margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 0),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: const BorderRadius.only(
                topLeft:
                    Radius.circular(0), // Верхний левый угол без скругления
                topRight:
                    Radius.circular(0), // Верхний правый угол без скругления
                bottomLeft:
                    Radius.circular(8), // Нижний левый угол скругление 8
                bottomRight:
                    Radius.circular(8), // Нижний правый угол скругление 8
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1), // Тень для elevation 3
                  blurRadius: 3, // Размытие для elevation 3
                  spreadRadius: 0,
                  offset: const Offset(0, 1), // Смещение тени вниз
                ),
              ],
              border: isSelected
                  ? Border.all(
                      color: FlutterFlowTheme.of(context).primary,
                      width: 2,
                    )
                  : null,
            ),
            clipBehavior: Clip.antiAlias,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Видео превью или плеер
                AspectRatio(
                  aspectRatio: 16 / 9,
                  child: showPlayer && _controllersMap.containsKey(tip.id)
                      ? YoutubePlayer(
                          controller: _controllersMap[tip.id]!,
                          aspectRatio: 16 / 9,
                        )
                      : GestureDetector(
                          onTap: () => _togglePlayer(tip.id, tip.videoUrl),
                          child: tip.videoUrl != null &&
                                  tip.videoUrl!.isNotEmpty
                              ? Stack(
                                  fit: StackFit.expand,
                                  children: [
                                    Image.network(
                                      _getYoutubeThumbnail(tip.videoUrl),
                                      fit: BoxFit.cover,
                                      errorBuilder:
                                          (context, error, stackTrace) =>
                                              Container(color: Colors.black12),
                                    ),
                                    const Center(
                                      child: Icon(
                                        Icons.play_circle_filled,
                                        color: Colors.white,
                                        size: 64,
                                      ),
                                    ),
                                  ],
                                )
                              : Container(
                                  color: Colors.black12,
                                  child: const Center(
                                    child: Icon(
                                      Icons.play_circle_outline,
                                      color: Colors.white54,
                                      size: 48,
                                    ),
                                  ),
                                ),
                        ),
                ),
                Padding(
                  padding: const EdgeInsets.fromLTRB(16, 16, 16, 12),
                  child: Text(
                    tip.title ?? '',
                    style: FlutterFlowTheme.of(context).titleMedium.override(
                          fontWeight: FontWeight.w600,
                          fontSize: 18,
                        ),
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.fromLTRB(16, 0, 16, 20),
                  child: Text(
                    tip.text ?? '',
                    style: FlutterFlowTheme.of(context).bodyMedium.override(
                          color: const Color(0xFF6B7280),
                          fontSize: 15,
                        ),
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}
