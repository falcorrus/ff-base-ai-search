// create-clean-vector-db.js\nconst fs = require('fs');\nconst path = require('path');\nconst { parse } = require('node-html-parser');\n\n// Путь к директории с экспортированным чатом\nconst chatDir = path.resolve(__dirname, '../ChatExport_2025-09-03');\n// Путь к новому файлу векторной базы данных\nconst vectorDbPath = path.resolve(__dirname, './data/clean-vector-db.json');\n\nconsole.log('Создаем чистую векторную базу данных для чата Telegram...');\n\n// Проверяем существование директории чата\nif (!fs.existsSync(chatDir)) {\n  console.error('Директория с чатом не найдена:', chatDir);\n  process.exit(1);\n}\n\n// Читаем все HTML-файлы из директории чата\nconst htmlFiles = fs.readdirSync(chatDir).filter(file => file.startsWith('messages') && file.endsWith('.html'));\nconsole.log(`Найдено ${htmlFiles.length} файлов для обработки`);\n\n// Создаем массив для хранения сообщений\nconst allMessages = [];\n\n// Обрабатываем каждый HTML-файл\nhtmlFiles.forEach((file, fileIndex) => {\n  console.log(`Обрабатываем файл: ${file} (${fileIndex + 1}/${htmlFiles.length})`);\n  const filePath = path.join(chatDir, file);\n  \n  try {\n    const htmlContent = fs.readFileSync(filePath, 'utf8');\n    const root = parse(htmlContent);\n    \n    // Ищем все сообщения в файле\n    const messages = root.querySelectorAll('.message.default');\n    \n    messages.forEach((messageElement, msgIndex) => {\n      try {\n        // Ограничиваем количество сообщений для демонстрации\n        if (allMessages.length >= 100) return;\n        \n        const idElement = messageElement.getAttribute('id');\n        const id = idElement ? idElement.replace('message-', '') : `${allMessages.length + 1}`;\n        \n        // Получаем дату сообщения\n        const dateElement = messageElement.querySelector('.pull_right.date.details');\n        const dateTitle = dateElement ? dateElement.getAttribute('title') : null;\n        let createdAt = new Date().toISOString();\n        \n        if (dateTitle) {\n          // Пытаемся распарсить дату\n          const dateMatch = dateTitle.match(/(\\d{2}\\.\\d{2}\\.\\d{4} \\d{2}:\\d{2}:\\d{2})/);\n          if (dateMatch) {\n            const dateStr = dateMatch[1];\n            // Преобразуем формат даты из DD.MM.YYYY HH:mm:ss в ISO\n            const [day, month, year] = dateStr.split('.');\n            const isoDateStr = `${year}-${month}-${day}T${dateStr.split(' ')[1]}.000Z`;\n            createdAt = new Date(isoDateStr).toISOString();\n          }\n        }\n        \n        // Получаем имя отправителя\n        const fromNameElement = messageElement.querySelector('.from_name');\n        const fromName = fromNameElement ? fromNameElement.text.trim() : 'Неизвестный пользователь';\n        \n        // Получаем текст сообщения\n        const textElement = messageElement.querySelector('.text');\n        let content = textElement ? textElement.text.trim() : '';\n        \n        // Если нет текста, проверяем другие возможные элементы\n        if (!content) {\n          const mediaCaptionElement = messageElement.querySelector('.media_wrap .media_caption');\n          content = mediaCaptionElement ? mediaCaptionElement.text.trim() : '';\n        }\n        \n        // Пропускаем пустые сообщения\n        if (!content) {\n          return;\n        }\n        \n        // Ограничиваем длину содержимого\n        if (content.length > 1000) {\n          content = content.substring(0, 1000) + '...';\n        }\n        \n        // Создаем объект сообщения\n        const message = {\n          id: `${allMessages.length + 1}`,\n          path: `chat/${file}#${id}`,\n          title: `Сообщение от ${fromName}`,\n          content: content,\n          createdAt: createdAt,\n          updatedAt: createdAt,\n          embedding: []\n        };\n        \n        allMessages.push(message);\n      } catch (msgError) {\n        console.error(`Ошибка обработки сообщения в файле ${file}:`, msgError.message);\n      }\n    });\n  } catch (fileError) {\n    console.error(`Ошибка чтения файла ${file}:`, fileError.message);\n  }\n});\n\nconsole.log(`Всего создано сообщений: ${allMessages.length}`);\n\n// Сохраняем векторную базу данных\nfs.writeFileSync(vectorDbPath, JSON.stringify(allMessages, null, 2), 'utf8');\nconsole.log(`Векторная база данных успешно создана: ${vectorDbPath}`);\n\nconsole.log('\\n--- Отчет ---');\nconsole.log(`Создано сообщений: ${allMessages.length}`);\nconsole.log(`Файлов обработано: ${htmlFiles.length}`);